<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.adc.da.sys.dao.UserEODao">
	<!-- Result Map -->
	<resultMap id="BaseResultMap" type="com.adc.da.sys.entity.UserEO">
		<id column="usid" property="usid" />
		<result column="account" property="account" />
		<result column="valid_flag" property="validFlag" />
		<result column="password" property="password" />
		<result column="uname" property="uname" />
		<result column="ext_info" property="extInfo" />
		<result column="dept_name" property="deptName" />
		<result column="orgUseName" property="orgUseName" />
		<result column="useCorpId" property="useCorpId" />
		<result column="email" property="email" />
		<result column="work_num" property="workNum" />
		<result column="creation_time" property="creationTime" />
		<result column="modify_time" property="modifyTime" />
		<result column="type" property="type" />
		<result column="userRoleName" property="userRoleName" />
		<result column="roleExtInfo" property="roleExtInfo" />
		<result column="corpType" property="corpType" />
	</resultMap>

	<!-- TS_USER table all fields -->
	<sql id="Base_Column_List">
		usid, account, valid_flag, password, uname, ext_info,email,work_num,creation_time,modify_time
	</sql>

	<resultMap id="UserRoleMap" extends="BaseResultMap" type="com.adc.da.sys.entity.UserEO">
		<collection property="roleEOList" ofType="com.adc.da.sys.entity.RoleEO">
			<id column="id" property="id" />
			<result column="data_scope" property="dataScope" />
			<result column="r_validFlag" property="validFlag" />
			<result column="is_default" property="isDefault" />
			<result column="name" property="name" />
			<result column="remarks" property="remarks" />
			<result column="r_extInfo" property="extInfo" />
		</collection>
		<collection property="orgEOList" ofType="com.adc.da.sys.entity.OrgEO">
			<id column="org_id" property="id" />
			<result column="org_name" property="name" />
			<result column="org_desc" property="orgDesc" />
			<result column="org_code" property="orgCode" />
			<result column="org_type" property="orgType" />
			<result column="org_parent_id" property="parentId" />
			<result column="org_remarks" property="remarks" />
			<result column="org_isshow" property="isShow" />
			<result column="org_validFlag" property="validFlag" />
			<result column="org_parentIds" property="parentIds" />
		</collection>
	</resultMap>
	
	

	<sql id="User_Role_List">
		u.*, r.id as id,
		r.data_scope as dataScope,
		r.valid_flag as r_validFlag,
		r.is_default as isDefault,
		r.name as name,
		r.remarks as remarks,
		r.ext_info as r_extInfo,
		ORG.id AS org_id,
		ORG.ORG_NAME AS org_name,
		ORG.ORG_DESC AS org_desc,
		ORG.ORG_CODE AS org_code,
		ORG.ORG_TYPE AS org_type,
		ORG.PARENT_ID AS org_parent_id,
		ORG.REMARKS AS org_remarks,
		ORG.IS_SHOW AS org_isshow,
		ORG.valid_flag AS org_validFlag,
		ORG.PARENT_IDS AS org_parentIds
	</sql>

	<!-- 查询条件 -->
	<sql id="Base_Where_Clause">
		where 1=1
		<trim suffixOverrides=",">
			<if test="usid != null">
				and u0.usid ${usidOperator} #{usid}
			</if>
			<if test="account != null">
				and u0.account ${accountOperator} #{account}
			</if>
			<if test="password != null">
				and u0.password ${passwordOperator} #{password}
			</if>
			<if test="uname != null">
				and u0.uname ${unameOperator} ${uname}
			</if>
			<if test="workNum != null" >
				and u0.work_num ${workNumOperator} ${workNum}
			</if>
			<if test="rolename != null">
				and r0.name ${rolenameOperator} #{rolename}
			</if>
			<if test="orgname != null">
				and ORG0.ORG_NAME ${orgnameOperator} #{orgname}
			</if>
		</trim>
	</sql>

	<update id="updatePassword">
		update TS_USER
		<set>
				password = #{newPassword}
		</set>
		where usid = #{userId}
	</update>

	<update id="updateUserEO" parameterType="com.adc.da.sys.entity.UserEO">
		update TS_USER
		<set>
			uname = #{uname}
		</set>
		where usid = #{usid}
	</update>

	<select id="getRoleIdListByUserId" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select role_id
		from TS_USER_ROLE ur
		where ur.user_id = #{usid}
	</select>

	<insert id="saveUserRole">
		insert into TR_USER_ROLE(user_id,role_id) values (#{usid}, #{roleId})
	</insert>
	
	<insert id="saveUserOrg">
		insert into TR_USER_ORG(user_id,org_id) values (#{usid}, #{orgId})
	</insert>

	<delete id="deleteUserRoleByUsid" parameterType="java.lang.String">
		delete from
		TR_USER_ROLE
		where user_id = #{usid}
	</delete>
	
	<delete id="deleteUserOrgByUsid" parameterType="java.lang.String">
		delete from
		TR_USER_ORG
		where user_id = #{usid}
	</delete>

	<update id="deleteLogicInBatch" parameterType="java.util.List">
		update TS_USER
		set valid_flag = 1
		where usid in
		<foreach item="usid" collection="list" open="(" separator=","
			close=")" index="index">
			#{usid}
		</foreach>
	</update>

	<delete id="deleteUserRoleByUsidInBatch" parameterType="java.util.List">
		delete from TR_USER_ROLE
		where user_id in
		<foreach item="usid" collection="list" open="(" separator=","
			close=")" index="index">
			#{usid}
		</foreach>
	</delete>
	
	<delete id="deleteUserOrgByUsidInBatch" parameterType="java.util.List">
		delete from TR_USER_ORG
		where user_id in
		<foreach item="usid" collection="list" open="(" separator=","
			close=")" index="index">
			#{usid}
		</foreach>
	</delete>

	<select id="getUserEOByAccount" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from TS_USER
		where account = #{account} AND valid_flag=0
	</select>

	<select id="getUserWithRoles" resultMap="UserRoleMap" parameterType="java.lang.String">
		select <include refid="User_Role_List" />
		from TS_USER u
		left join TR_USER_ROLE ur on u.usid = ur.user_id
		left join TS_ROLE r on ur.role_id = r.id
		left join TR_USER_ORG UORG on u.usid = UORG.user_id
	    left join TS_ORG ORG on UORG.org_id = ORG.id
		where u.usid = #{id}
	</select>

	<select id="get" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from TS_USER u
		left join TR_USER_ROLE ur
		on u.usid = ur.role_id
		where ur.roleId = #{id}
	</select>

	<!-- 插入记录 -->
	<insert id="insert" parameterType="com.adc.da.sys.entity.UserEO">
		insert into TS_USER(
		<include refid="Base_Column_List" />
		)
		values (#{usid}, #{account}, #{validFlag}, #{password}, #{uname}, #{extInfo},#{email},#{workNum},#{creationTime},#{modifyTime})
	</insert>

	<!-- 根据pk，修改记录 -->
	<update id="updateByPrimaryKey" parameterType="com.adc.da.sys.entity.UserEO">
		update TS_USER
		set account = #{account},
		valid_flag = #{validFlag},
		password = #{password},
		uname = #{uname},
		where usid = #{usid}
	</update>

	<!-- 修改记录，只修改只不为空的字段 -->
	<update id="updateByPrimaryKeySelective" parameterType="com.adc.da.sys.entity.UserEO">
		update TS_USER
		<set>
			<if test="uname != null">
				uname = #{uname},
			</if>
			<if test="account != null">
				account = #{account},
			</if>
			<if test="password != null and password != ''">
				password = #{password},
			</if>
			<if test="workNum != null" >
				work_num = #{workNum},
			</if>
			<if test="email != null" >
				email = #{email},
			</if>
			<if test="modifyTime != null" >
				modify_time = #{modifyTime},
			</if>
			<if test="extInfo != null" >
				ext_info = #{extInfo}
			</if>
		</set>
		where usid = #{usid}
	</update>
	
	<!-- 重置密码 -->
	<update id="updatePasswordByPrimaryKey" parameterType="com.adc.da.sys.entity.UserEO">
		update TS_USER
		set
			password = #{password} 
		where usid = #{usid}
	</update>

	<!-- 根据id查询 TS_USER -->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from TS_USER
		where usid = #{value}
	</select>

	<!-- 删除记录 -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from TS_USER
		where usid = #{value}
	</delete>

	<!-- TS_USER 列表总数 -->
	<select id="queryByCount" resultType="java.lang.Integer"
		parameterType="com.adc.da.base.page.BasePage">
		select count(distinct u0.usid) from TS_USER u0
		left join TR_USER_ROLE ur0 on u0.usid = ur0.user_id
		left join TS_ROLE r0 on ur0.role_id = r0.id
		left join TR_USER_ORG UORG0 on u0.usid = UORG0.user_id
		left join TS_ORG ORG0 on UORG0.org_id = ORG0.id
		<include refid="Base_Where_Clause" />
		and u0.valid_flag != 1
	</select>

	<!-- 查询TS_USER列表 -->
    <select id="queryByPage" resultMap="UserRoleMap" parameterType="com.adc.da.base.page.BasePage">
	  select <include refid="User_Role_List" /> from
		  (select tmp_tb.* , rownum rn from
			  (select distinct u0.* from TS_USER u0
			   left join TR_USER_ROLE ur0 on u0.usid = ur0.user_id
			   left join TS_ROLE r0 on ur0.role_id = r0.id
			   left join TR_USER_ORG UORG0 on u0.usid = UORG0.user_id
			   left join TS_ORG ORG0 on UORG0.org_id = ORG0.id
			   <include refid="Base_Where_Clause"/>
			   and u0.valid_flag != 1
			   <if test="pager.orderCondition != null and pager.orderCondition != ''" >
			 	  ${pager.orderCondition}
			   </if>
			  ) tmp_tb where rownum &lt;= ${pager.endIndex}) u
			  left join TR_USER_ROLE ur on u.usid = ur.user_id
			  left join TS_ROLE r on ur.role_id = r.id
			  left join TR_USER_ORG UORG on u.usid = UORG.user_id
			  left join TS_ORG ORG on UORG.org_id = ORG.id
			  where rn &gt;= ${pager.startIndex}
    </select>

	<select id="queryByList" resultMap="BaseResultMap" parameterType="com.adc.da.base.page.BasePage">
      select <include refid="Base_Column_List"/> from TS_USER
      <include refid="Base_Where_Clause"/>
      <if test="pager.orderCondition != null and pager.orderCondition != ''" >
         ${pager.orderCondition}
      </if>
	</select>
	<!--多表查询-->
	<select id="selectUserDetailsByPage" resultMap="BaseResultMap" parameterType="com.adc.da.base.page.BasePage">
		select * from TS_ROLE r left join TR_USER_ROLE ur on r.id=ur.role_id left join TS_USER u on u.usid=ur.user_id left join SYS_CORP co on co.id=r.id
	</select>

	<!--根据当前登录用户id查询个人信息及部门-->
	<select id="selectOrgByPrimaryKey" resultMap="BaseResultMap"
			parameterType="java.lang.String">
		select
		  TS_USER.usid,TS_USER.uname,TS_ORG.org_name as orgUseName,TS_ORG.corp_id as useCorpId,SYS_CORP.corp_type as corpType
		from TR_USER_ORG right join TS_USER on TS_USER.usid = TR_USER_ORG.user_id
			left join TS_ORG on TR_USER_ORG.org_id = TS_ORG.id
			left join SYS_CORP on TS_ORG.corp_id = SYS_CORP.id
		where TS_USER.valid_flag = 0 and TS_USER.usid = #{value}
	</select>

	<!--根据当前登录用户id查询个人角色信息-->
	<select id="selectRoleMessageByPrimaryKey" resultMap="BaseResultMap"
			parameterType="java.lang.String">
		select
		TS_ROLE.name as userRoleName,TS_ROLE.ext_info as roleExtInfo
		from TR_USER_ROLE right join TS_USER on TS_USER.usid = TR_USER_ROLE.user_id
		left join TS_ROLE on TR_USER_ROLE.role_id = TS_ROLE.id
		where TS_USER.valid_flag = 0 and TS_ROLE.valid_flag = 0 and TS_USER.usid = #{value}
	</select>

	<select id="selectByUnameAndPwd" resultMap="BaseResultMap"
			parameterType="com.adc.da.sys.entity.UserEO">
		select TS_USER.* ,SYS_CORP.CORP_NAME as corpName,SYS_CORP.CORP_TYPE AS  type
		from TS_USER  LEFT JOIN TR_USER_ORG  ON  TS_USER.USID = TR_USER_ORG.USER_ID
			  LEFT JOIN  TS_ORG   ON  TR_USER_ORG.ORG_ID = TS_ORG.ID
			  LEFT JOIN  SYS_CORP  ON  SYS_CORP.ID = TS_ORG.CORP_ID
		where TS_USER.valid_flag = 0 and account = #{account}
	</select>
	
	<select id="findBySetOrgCount" resultType="java.lang.Integer"
			parameterType="com.adc.da.base.page.BasePage">
		SELECT count(1) 
			FROM TS_USER tu 
			LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
		WHERE tu.valid_flag = '0' AND tuo.user_id is null
	</select>
	<select id="findBySetOrg"  resultMap="BaseUserRoleMap"
			parameterType="com.adc.da.base.page.BasePage">
		SELECT * FROM 
			(SELECT  tmp_tb.* , rownum rn FROM 
				(SELECT tu.usid, tu.uname, tu.account, tu.work_num AS workNum, tu.email, 
					tu.modify_time AS modifyTime 
						FROM TS_USER tu 
						LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
					WHERE tu.valid_flag = 0 AND tuo.user_id is null
					order by tu.modify_time desc
				) tmp_tb WHERE rownum &lt;= ${pager.endIndex}
			) WHERE rn &gt;= ${pager.startIndex}
	</select>
	
	<!-- 根据 orgid 查询用户 -->
	<select id="queryByOrgCount" resultType="java.lang.Integer"
			parameterType="com.adc.da.base.page.BasePage">
		SELECT count(1) 
			FROM (
		SELECT tu.usid, tu.uname, tu.account, tu.work_num AS workNum, tu.email, tu.ext_info,
		tu.modify_time AS modifyTime, tso.org_name AS orgUseName, tso.id AS deptId
		FROM TS_USER tu
		LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
		LEFT JOIN TS_ORG tso ON tso.id = tuo.org_id and tso.valid_flag = 0
		LEFT JOIN TR_USER_ROLE tur ON tur.user_id = tu.usid
		LEFT JOIN TS_ROLE tr ON tr.id = tur.role_id
		WHERE tu.valid_flag = '0'
		<if test="useCorpId != null and useCorpId != ''">
			and tuo.org_id = #{useCorpId}
		</if>
		<if test="getCorpId != null and getCorpId != ''" >
			and (tso.CORP_ID = #{getCorpId} or tso.CORP_ID = null)
		</if>
		<if test="uname != null and uname != ''" >
			and tu.uname like #{uname}
		</if>
		<if test="deptId != null and deptId != ''">
			and tso.id = #{deptId}
		</if>
		<if test="roleId != null and roleId != ''">
			and tr.id = #{roleId}
		</if>
		UNION (
		SELECT
		tu.usid,
		tu.uname,
		tu.account,
		tu.work_num AS workNum,
		tu.email,
		tu.ext_info,
		tu.modify_time AS modifyTime,null,null
		FROM
		TS_USER tu  where tu.valid_flag = 0 and NOT EXISTS (select * from TR_USER_ORG tuo where tuo.user_id = tu.usid)
		<if test="uname != null and uname != ''" >
			and tu.uname like #{uname}
		</if>
		))
	</select>
	<select id="queryByOrg" resultMap="BaseUserRoleMap"
			parameterType="com.adc.da.base.page.BasePage">
		SELECT * FROM
		(SELECT tmp_tb.* , rownum rn FROM (
		SELECT * FROM
		(SELECT tu.usid, tu.uname, tu.account, tu.work_num AS workNum, tu.email, tu.ext_info,
		tu.modify_time AS modifyTime, tso.org_name AS orgUseName, tso.id AS deptId
		FROM TS_USER tu
		LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
		LEFT JOIN TS_ORG tso ON tso.id = tuo.org_id and tso.valid_flag = 0
		LEFT JOIN TR_USER_ROLE tur ON tur.user_id = tu.usid
		LEFT JOIN TS_ROLE tr ON tr.id = tur.role_id
		WHERE tu.valid_flag = '0'
		<if test="useCorpId != null and useCorpId != ''">
			and tuo.org_id = #{useCorpId}
		</if>
					<if test="getCorpId != null and getCorpId != ''" >
						and (tso.CORP_ID = #{getCorpId} or tso.CORP_ID = null)
					</if>
					<if test="uname != null and uname != ''" >
						and tu.uname like #{uname}  
					</if>
					<if test="deptId != null and deptId != ''">
						and tso.id = #{deptId}
					</if>
					<if test="roleId != null and roleId != ''">
						and tr.id = #{roleId}
					</if>
						UNION (
						SELECT
						tu.usid,
						tu.uname,
						tu.account,
						tu.work_num AS workNum,
						tu.email,
						tu.ext_info,
						tu.modify_time AS modifyTime,null,null
						FROM
						TS_USER tu  where tu.valid_flag = 0 and NOT EXISTS (select * from TR_USER_ORG tuo where tuo.user_id = tu.usid)
						<if test="uname != null and uname != ''" >
							and tu.uname like #{uname}
						</if>
						) )getAll
					order by getAll.modifyTime desc
				) tmp_tb WHERE rownum &lt;= ${pager.endIndex}
			) WHERE rn &gt;= ${pager.startIndex}
	</select>
	<!-- 查询部门和其子部门的用户 -->
	<select id="queryByOrgAndChilesCount" resultType="java.lang.Integer" parameterType="com.adc.da.base.page.BasePage">
		SELECT COUNT(1) FROM 
		(SELECT TU.usid  
			FROM TS_USER tu 
			LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
			LEFT JOIN TS_ORG tso ON tso.id = tuo.org_id
			LEFT JOIN TR_USER_ROLE tur ON tur.user_id = tu.usid
		WHERE tu.valid_flag = '0' and tuo.org_id in (${useCorpId})
			<if test="uname != null and uname != ''" >
				and tu.uname like  #{uname} 
			</if>
			<if test="deptId != null and deptId != ''">
				and tso.id = #{deptId}
			</if>
			<if test="roleId != null and roleId != ''">
				and tur.role_id = #{roleId}
			</if>
			GROUP BY tu.usid)
	</select>
	<select id="queryByOrgAndChiles" resultMap="BaseUserRoleMap"
			parameterType="com.adc.da.base.page.BasePage">
		SELECT * FROM 
			(SELECT  tmp_tb.* , rownum rn FROM 
				(SELECT tu.usid, tu.uname, tu.account, tu.work_num AS workNum, tu.email, 
					tu.modify_time AS modifyTime, tso.org_name AS orgUseName, tso.id AS deptId  
					FROM TS_USER tu 
					LEFT JOIN TR_USER_ORG tuo ON tuo.user_id = tu.usid
					LEFT JOIN TS_ORG tso ON tso.id = tuo.org_id and tso.valid_flag = 0
					LEFT JOIN TR_USER_ROLE tur ON tur.user_id = tu.usid
				WHERE tu.valid_flag = '0' and tuo.org_id in (${useCorpId})
					<if test="uname != null and uname != ''" >
						and tu.uname like #{uname}  
					</if>
					<if test="deptId != null and deptId != ''">
						and tso.id = #{deptId}
					</if>
					<if test="roleId != null and roleId != ''">
						and tur.role_id = #{roleId}
					</if>
					GROUP BY tu.usid,tu.uname,tu.ACCOUNT,tu.work_num,tu.email,tu.modify_time,tso.org_name,tso.ID 
					order by tu.modify_time desc 
				) tmp_tb WHERE rownum &lt;= ${pager.endIndex}
			) WHERE rn &gt;= ${pager.startIndex}
	</select>

	<select id="queryOrgByAccount" resultMap="BaseResultMap"
			parameterType="java.lang.String">
		SELECT TS_ORG.org_name as orgUseName
		FROM TS_USER LEFT JOIN TR_USER_ORG ON TS_USER.USID = TR_USER_ORG.USER_ID
		LEFT JOIN TS_ORG ON TR_USER_ORG.ORG_ID = TS_ORG.ID
		WHERE TS_USER.valid_flag = 0 and TS_ORG.valid_flag = 0 and TS_USER.account = #{account}
	</select>

	<resultMap id="BaseUserRoleMap" type="com.adc.da.sys.entity.UserEO">
		<id column="usid" property="usid" />
		<result column="account" property="account" />
		<result column="uname" property="uname" />
		<result column="ext_info" property="extInfo" />
		<result column="dept_name" property="deptName" />
		<result column="orgUseName" property="orgUseName" />
		<result column="useCorpId" property="useCorpId" />
		<result column="email" property="email" />
		<result column="work_num" property="workNum" />
		<result column="modify_time" property="modifyTime" />
		<result column="corpName" property="corpName" />
		<result column="type" property="type" />
		<collection property="roleEOList" column="usid" javaType="ArrayList" 
			ofType="com.adc.da.sys.entity.RoleEO" select="com.adc.da.sys.dao.RoleEODao.findByUserId"></collection>
	</resultMap>
</mapper>
